动态规划（Dynamic Programming，DP）是一种用于解决优化问题的算法技术。它通过将大问题分解为小问题，并存储小问题的解，以避免重复计算。动态规划通常用于解决具有重叠子问题和最优子结构的问题。

基本解决方案通常包括以下几个步骤：

定义状态：用变量描述问题的各个方面。
状态转移方程：描述状态之间如何转移。
初始化：设定初始状态的值。
计算：按照某种顺序计算每个状态。
返回结果：从计算的状态中得出问题的解。
这样，通过存储和重用子问题的解，动态规划能高效地解决问题。



经典的动态规划案例是计算斐波那契数列。
斐波那契数列定义为：F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2)。

不使用动态规划的递归解法会有很多重复计算。使用动态规划，我们可以避免这种重复。

定义状态：dp[i] 表示第 i 个斐波那契数。
状态转移方程：dp[i] = dp[i-1] + dp[i-2]
初始化：dp[0] = 0, dp[1] = 1
计算：从 i = 2 开始，计算到 i = n。
返回结果：dp[n] 就是第 n 个斐波那契数。

Python 代码示例：
def fibonacci(n):
    dp = [0] * (n + 1)
    dp[0] = 0
    dp[1] = 1
    
    for i in range(2, n + 1):
        dp[i] = dp[i-1] + dp[i-2]
        
    return dp[n]
